openapi: "3.0.2"
info:
  title: Rest API Docs
  version: "1.0"
servers:
  - url: http://localhost:4444/
  - url: https://ciaro360-server.vercel.app/
components:
  schemas:
    ResponseWithMsg:
      type: object
      properties:
        status:
          type: boolean
        msg:
          type: string

    IncomingProcedureCreateData:
      type: object
      properties:
        title:
          type: string
          description: "Title of the procedure"
        description:
          type: string
          description: "Description of the procedure"
        content:
          type: string
          description: "Content of the procedure"
        tags:
          $ref: "#/components/schemas/IncomingTagsData"
        policies:
          type: array
          items:
            type: string
          description: "Array of policy IDs associated with the procedure"
        projectId:
          type: string
          description: "ID of the project associated with the procedure"

    IncomingTagsData:
      type: object
      properties:
        listed:
          type: array
          items:
            type: string
          description: "Array of listed tags"
        unlisted:
          type: array
          items:
            type: string
          description: "Array of unlisted tags"

    ResponseWithMsgError:
      type: object
      properties:
        status:
          type: boolean
          example: false
        msg:
          type: string

    MasterRecordInterfaceForRisk:
      type: object
      properties:
        title:
          type: string
        text:
          type: string
        
    Control:
      type: object
      properties:
        property:
          type: integer

    Incomming_Tags:
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
            example: "6487f67cc0f0ec0734feaf64"
          name:
            type: string
            example: "DEMO2"

    Onboarding:
      type: object
      properties:
        master:
          type: object
          properties:
            logoUri:
              type: string
            exportTemplatesId:
              type: string
            OrgDetails:
              type: object
              properties:
                name:
                  type: string
                emailServer:
                  type: object
                  properties:
                    host:
                      type: string
                    port:
                      type: number
                    auth:
                      type: object
                      properties:
                        username:
                          type: string
                        password:
                          type: string
                        emailAddress:
                          type: string
            authSetup:
              type: object
              properties:
                sso:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                    samlFile:
                      type: string
                normalLogin:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                    complexity:
                      type: object
                      properties:
                        passwordMinLength:
                          type: number
                        passwordMaxLength:
                          type: number
                        includeUppercase:
                          type: boolean
                        includeLowercase:
                          type: boolean
                        includeNumber:
                          type: boolean
            workflow:
              type: object
              properties:
                tier3Enabled:
                  type: boolean
            risk:
              type: object
              properties:
                formulaId:
                  type: string
            log:
              type: object
              properties:
                retentionPeriod:
                  type: number
                policy:
                  type: boolean
                procedures:
                  type: boolean
                controls:
                  type: boolean
            reviewFrequency:
              type: string
              enum:
                - daily
                - weekly
                - monthly
                - yearly
        sso:
          type: object
          properties:
            idP_Name:
              type: string
            issuer:
              type: string
            ssoUrl:
              type: string
            cert:
              type: string

    LogsData:
      type: object
      properties:
        _id:
          type: string
        objectType:
          type: string
          enum:
            - policy
            - procedures
            - controls
            - users
            - tags
        objectId:
          type: string
        userId:
          type: string
        action:
          type: string
          enum:
            - add
            - delete
            - update
            - review
            - approve
        description:
          type: string
        timestamp:
          type: integer
        __v:
          type: integer

    RoleInterface:
      type: object
      properties:
        name:
          type: string
        userControl:
          type: object
          properties:
            fullAccess:
              type: boolean
            view:
              type: boolean
        onboarding:
          type: object
          properties:
            fullAccess:
              type: boolean
            view:
              type: boolean
        control:
          type: object
          properties:
            fullAccess:
              type: boolean
            view:
              type: boolean
        policy:
          type: object
          properties:
            fullAccess:
              type: boolean
            view:
              type: boolean
            edit:
              type: boolean
        procedure:
          type: object
          properties:
            fullAccess:
              type: boolean
            view:
              type: boolean
            edit:
              type: boolean
        TPRA:
          type: object
          properties:
            fullAccess:
              type: boolean
            view:
              type: boolean
            edit:
              type: boolean
        training:
          type: object
          properties:
            fullAccess:
              type: boolean
            view:
              type: boolean
            edit:
              type: boolean
        evidences:
          type: object
          properties:
            fullAccess:
              type: boolean
            view:
              type: boolean
            edit:
              type: boolean
        audit:
          type: object
          properties:
            fullAccess:
              type: boolean
            view:
              type: boolean
            edit:
              type: boolean
        superAdmin:
          type: boolean
        admin:
          type: boolean

    TPR_OutgoingInterface:
      type: object
      properties:
        title:
          type: string
        author:
          type: array
          items:
            type: string
        TPRUsers:
          type: array
          items:
            type: string
        qna:
          type: array
          items:
            type: object
            properties:
              questionId:
                type: array
                items:
                  type: string
              question:
                type: string
              ans:
                type: string
              type:
                type: string
                enum:
                  - Boolean
                  - String
        approved:
          type: boolean

    TPR_IncomingInterface:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        author:
          type: array
          items:
            type: string
        TPRUsers:
          type: array
          items:
            type: string
        qna:
          type: array
          items:
            type: object
            properties:
              questionId:
                type: array
                items:
                  type: string
              question:
                type: string
              type:
                type: string
                enum:
                  - String
              _id:
                type: string
              ans:
                type: string
        approved:
          type: boolean
        __v:
          type: integer

    ListOfTRP_Forms:
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
          author:
            type: array
            items:
              type: string
          TPRUsers:
            type: array
            items:
              type: string
          approved:
            type: boolean

    Outgoing_Tags:
      type: object
      properties:
        listed:
          type: array
          items:
            type: string
          example: ["64410f9eb6f82aada0625a94", "64410f9eb6f82aada0625a94"]
        unlisted:
          type: array
          items:
            type: string
          example: ["Hr", "It"]

    PolicyCreate:
      type: object
      properties:
        projectId:
          type: string
        title:
          type: string
        
    getAllScopes:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        projects:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              name:
                type: string
        __v:
          type: number
        
    getEvidence:
      type: object
      properties:
        status:
          type: boolean
          description: Indicates the success status.
        evidence:
          type: object
          properties:
            _id:
              type: string
              description: The ID of the evidence.
            name:
              type: string
              description: The name of the evidence.
            url:
              type: string
              description: The URL of the evidence.
            frequency:
              type: string
              description: The frequency of the evidence.
            assignee:
              type: array
              items:
                type: object
                properties:
                  _id:
                    type: string
                    description: The ID of the assignee.
                  email:
                    type: string
                    description: The email of the assignee.
            custom:
              type: boolean
              description: Indicates if the evidence is custom.
            files:
              type: array
              items:
                type: object
                properties:
                  _id:
                    type: string
                    description: The ID of the file.
                  name:
                    type: string
                    description: The name of the file.
            controls:
              type: array
              items:
                type: object
                properties:
                  _id:
                    type: string
                    description: The ID of the control.
                  nameId:
                    type: string
                    description: The name ID of the control.
                  name:
                    type: string
                    description: The name of the control.
            risks:
              type: array
              items:
                type: object
                properties:
                  _id:
                    type: string
                    description: The ID of the risk.
                  title:
                    type: string
                    description: The title of the risk.
            createdAt:
              type: integer
              description: The timestamp when the evidence was created.
            updatedAt:
              type: integer
              description: The timestamp when the evidence was last updated.
            __v:
              type: integer
              description: Version control field.
            updatedBy:
              type: string
              description: The ID of the user who last updated the evidence.
      required:
        - status
        - evidence

    Policy:
      type: object
      properties:
        status:
          type: boolean
        policy:
          type: object
          properties:
            assignees:
              type: object
              properties:
                author:
                  type: array
                  items:
                    type: string
                reviewer:
                  type: array
                  items:
                    type: string
                approver:
                  type: array
                  items:
                    type: string
            _id:
              type: string
            title:
              type: string
            ID:
              type: string
            count:
              type: number
            active:
              type: boolean
            custom:
              type: boolean
            status:
              type: string
            versions:
              type: array
              items:
                type: string
            reminder:
              type: string
              format: date-time
            tags:
              type: array
              items:
                type: string
            processDocs:
              type: array
              items:
                type: string
            evidence:
              type: object
              properties:
                risks:
                  type: array
                  items:
                    type: string
                attchements:
                  type: array
                  items:
                    type: string
            controls:
              type: array
              items:
                type: string
            projects:
              type: array
              items:
                type: string
            logs:
              type: array
              items:
                type: string
            created_at:
              type: number
            updated_at:
              type: number
            __v:
              type: integer

    IncommingPolicyVersion:
      type: object
      properties:
        _id:
          type: string
        ID:
          type: string
        policy:
          type: string
        description:
          type: string
        created_by:
          type: string
        updated_by:
          type: string
        status:
          type: string
        comments:
          type: array
          items:
            type: string
        logs:
          type: array
          items:
            type: string
        assignees:
              type: object
              properties:
                author:
                  type: array
                  items:
                    type: string
                reviewer:
                  type: array
                  items:
                    type: string
                approver:
                  type: array
                  items:
                    type: string
        onWatch:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        __v:
          type: integer

    RiskInput:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        risk:
          type: string
        content:
          type: string
        project:
          type: string
        category:
          type: string
        likelihood:
          type: integer
        impact:
          type: integer

    RisksApiResponse:
      type: object
      properties:
        status:
          type: boolean
        risk:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              title:
                type: string
              description:
                type: string
              status:
                type: string
              created_by:
                type: string
              category:
                type: string

    Risk:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          type: string
        content:
          type: string
        created_by:
          type: string
        owner:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        updated_by:
          type: string
        category:
          type: string
        likelihood:
          type: integer
        impact:
          type: integer
        risk:
          type: object
          properties:
            val:
              type: number
            level:
              type: string
        evidence:
          type: object
          properties:
            policies:
              type: array
              items:
                type: string
            processDocs:
              type: string
        comments:
          type: array
          items:
            type: string
        controls:
          type: array
          items:
            type: string
        versions:
          type: array
          items:
            type: string
        evidences:
          type: array
          items:
            type: string
        projects:
          type: array
          items:
            type: string
        __v:
          type: integer

    RiskSchemaVersion:
      type: object
      properties:
        title:
          type: string
          description: "Risk title"
        description:
          type: string
          description: "Risk description"
        content:
          type: string
          description: "Risk content"
        created_by:
          type: string
          description: "ID of the user who created the risk"
        created_at:
          type: string
          format: date-time
          description: "Date and time when the risk was created"
        category:
          type: string
          description: "Risk category"
        likelihood:
          type: number
          description: "Likelihood of the risk"
        impact:
          type: number
          description: "Impact of the risk"
        risk:
          type: number
          description: "Overall risk score"
        tags:
          type: array
          items:
            type: string
          description: "Array of tag IDs associated with the risk"
        policies:
          type: array
          items:
            type: string
          description: "Array of policy IDs associated with the risk"
        projects:
          type: array
          items:
            type: string
          description: "Array of project IDs associated with the risk"
        controls:
          type: array
          items:
            type: string
          description: "Array of control IDs associated with the risk"
        procedures:
          type: array
          items:
            type: string
          description: "Array of procedure IDs associated with the risk"

    CommentInput:
      type: object
      properties:
        images:
          type: array
          items:
            type: string
        content:
          type: string

    CommentResponse:
      type: object
      properties:
        status:
          type: boolean
        comment:
          type: array
          items:
            nullable: true
            type: object
            properties:
              _id:
                type: string
              content:
                type: string
              images:
                type: array
                items:
                  type: string
              created_by:
                type: string
              created_at:
                type: string
              __v:
                type: number

    GetProcedure:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        created_by:
          type: string
        created_at:
          type: string
          format: date-time
        updated_by:
          type: string
        updated_at:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - draft
            - drafted
            - reviewed
            - approved
            - rejected
            - deleted
          default: draft
        assignees:
          type: object
          properties:
            author:
              type: array
              items:
                type: string
            reviewer:
              type: array
              items:
                type: string
            approver:
              type: array
              items:
                type: string
        versions:
          type: array
          items:
            type: string
        reminder:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string
        policies:
          type: array
          items:
            type: string
        controls:
          type: array
          items:
            type: string
        projects:
          type: array
          items:
            type: string
        beingModified:
          type: boolean
          default: false
    
    getAllEvidences:
      type: object
      properties:
        status:
          type: boolean
        evidences:
          type: array
          items:
            nullable: true
            type: object
            properties:
              _id:
                type: string
              name:
                type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  # PUBLIC ROUTES
  /auth/verifySuperAdminInitialCredentials:
    post:
      tags:
        - "Public Routes"
      summary: verify Initial Access Credentials
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "abc"
                token:
                   type: string
                  
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"           
                  
        "404":
          description: Not Found
        "500":
          description: Internal Server Error

  /auth/sendOTP:
    post:
      tags:
        - "Public Routes"
      summary: Send OTP
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "abc"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    default: true            
                  data:
                    type: object
                    properties:
                      email:
                        type: string
        "404":
          description: Not Found
        "500":
          description: Internal Server Error 

  /auth/verifyOTP:
    post:
      tags:
        - "Public Routes"
      summary: verify OTP
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "abc"
                otp:
                   type: string
                  
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"           
                  
        "404":
          description: Not Found
        "500":
          description: Internal Server Error

  /auth/setSuperAdminPassword:
    post:
      tags:
        - "Public Routes"
      summary: set super admin first time password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "abc"
                password:
                   type: string
                  
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"           
                  
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
 
  /auth/superAdminForgotPassword:
    post:
      tags:
        - "Public Routes"
      summary: Request Reset Password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "abc"
                
                  
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"           
                  
        "404":
          description: Not Found
        "500":
          description: Internal Server Error

  /auth/validatePasswordResetToken:
    post:
      tags:
        - "Public Routes"
      summary: verify link
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    default: true            
                  data:
                    type: object
                    properties:
                      username:
                        type: string
        "404":
          description: Not Found
        "500":
          description: Internal Server Error 


  /auth/superAdminResetPassword:
    post:
      tags:
        - "Public Routes"
      summary: Reset password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "abc"
                password:
                   type: string
                  
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"           
               
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
                
  
  /auth/verifyUserInitialCredentials:
    post:
      tags:
        - "Public Routes"
      summary: verify user Initial Access Credentials
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                 email:
                  type: string
                  example: "abc@gmail.com"
                 token:
                   type: string
                  
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    default: true
                  organizationId:
                     type: string
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  
  /auth/getPasswordComplexity/{id}:
    get:
      tags:
        - "Public Routes"
      summary: Password Complexity
      parameters:
        - name: id
          in: path
          description: Organization's id
          required: true
          schema:
            type: string              
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  passwordComplexity:
                    type: object
                    properties:
                      passwordMinLength:
                        type: number 
                      passwordMaxLength:
                        type: number 
                      includeUppercase:
                        type: boolean
                      includeLowercase:
                        type: boolean
                      includeNumber:
                        type: boolean 
                      includeSpecialCharacter:
                        type: boolean      
        "404":
          description: Not Found
        "500":
          description: Internal Server Error


  /auth/setUserPassword:
    post:
      tags:
        - "Public Routes"
      summary: set user first time password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "abc@gmail.com"
                password:
                   type: string
                  
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"           
               
        "404":
          description: Not Found
        "500":
          description: Internal Server Error



  /auth/checkUsername:
    post:
      tags:
        - "Public Routes"
      summary: check username
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "abc@gmail.com"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    default: true            
                  data:
                    type: object
                    properties:
                      name:
                        type: string
        "404":
          description: Not Found
        "500":
          description: Internal Server Error                

  /auth/login:
    post:
      tags:
        - "Public Routes"
      summary: Login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "abc@gmail.com"
                password:
                  type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    default: true
                  accessToken:
                    type: string
                  refToken:
                    type: string
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                      id:
                        type: string
                      passExpiry:
                        type: boolean
                      role:
                        type: array
                        items:
                          type: string
        "404":
          description: Not Found
        "500":
          description: Internal Server Error

  /auth/sso:
    get:
      tags:
        - "Public Routes"
      summary: Login using SSO

      responses:
        "200":
          description: Success
        404:
          description: Not Found

  /auth/forgotPassword:
    post:
      summary: Request password reset
      tags:
        - Public Routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User email
              required:
                - email
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"

        '404':
          description: Not found
        '401':
          description: Unauthorized

  /auth/refreshToken:
    post:
      summary: Request a new login token
      tags:
        - Public Routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refToken:
                  type: string
              required:
                - email
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"

        '404':
          description: Not found
        401:
          description: Unauthorized

  /auth/resetPassword:
    post:
      summary: Reset password
      tags:
        - Public Routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Reset token
                password:
                  type: string
                  description: New password
              required:
                - token
                - password
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not found
        401:
          description: Unauthorized
  
  /auth/setupMfa:
    post:
      summary: setup Mfa
      tags:
        - Public Routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  data:
                    type: string
        '404':
          description: Not found
        '401':
          description: Unauthorized

  /auth/verifyMfa:
    post:
      summary: verify MFA
      tags:
        - Public Routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                email:
                  type: string
              required:
                - token
                - email
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    default: true
                  accessToken:
                    type: string
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                      id:
                        type: string
                      passExpiry:
                        type: boolean
                      role:
                        type: array
                        items:
                          type: string
        '404':
          description: Not found
        '401':
          description: Unauthorized
  
  /auth/verifyEmailMfa:
    post:
      summary: verify Email MFA
      tags:
        - Public Routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                email:
                  type: string
              required:
                - token
                - email
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    default: true
                  accessToken:
                    type: string
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                      id:
                        type: string
                      passExpiry:
                        type: boolean
                      role:
                        type: array
                        items:
                          type: string
        '404':
          description: Not found
        '401':
          description: Unauthorized
  
  /auth/sendEmailOtp:
    post:
      summary: Send Email OTP for setting up Email MFA
      tags:
        - Public Routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
              required:
                - token
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not found
        '401':
          description: Unauthorized


  # User Management Routes
  /user:
    get:
      tags:
        - "User Management Routes"
      description: "Get list of users"
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: count
          schema:
            type: integer
        - in: query
          name: username
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  count:
                    type: number
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        email:
                          type: string
                          format: email
                        firstname:
                          type: string
                        lastname:
                          type: string
                        active:
                          type: boolean
                        role:
                          type: object
                          properties:
                            _id:
                              type: string
                            name:
                              type: string
                        jobTitle:
                          type: string
        404:
          description: Not Found
        401:
          description: Unauthorized
      security:
        - bearerAuth: []

  /user/profile:
    get:
      summary: Get user profile
      tags:
        - "User Routes"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  user:
                    type: object
                    properties:
                      ssoUser:
                        type: boolean
                      image:
                        type: string
                      email:
                        type: string
                      firstname:
                        type: string
                      lastname:
                        type: string
                      passExpiry:
                        type: number
                      jobTitle:
                        type: string
                      phone:
                        type: string
                      mobilePhone:
                        type: string
                      country:
                        type: string
                      locale:
                        type: string
                      role:
                        type: string
                      active:
                        type: boolean
                      mfa:
                        type: boolean
                      login:
                        type: boolean
                      
        '404':
          description: Not Found
  
  /user/profile/{id}:
    get:
      summary: Get user profile
      parameters:
        - name: id
          in: path
          description: User's id
          required: true
          schema:
            type: string
      tags:
        - "User Routes"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  user:
                    type: object
                    properties:
                      ssoUser:
                        type: boolean
                      image:
                        type: string
                      email:
                        type: string
                      firstname:
                        type: string
                      lastname:
                        type: string
                      passExpiry:
                        type: number
                      jobTitle:
                        type: string
                      phone:
                        type: string
                      mobilePhone:
                        type: string
                      country:
                        type: string
                      locale:
                        type: string
                      role:
                        type: string
                      active:
                        type: boolean
                      mfa:
                        type: boolean
                      login:
                        type: boolean
                      
        '404':
          description: Not Found

  /user/notifications:
    get:
      summary: Get user profile
      tags:
        - "User Routes"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  user:
                    type: object
                    properties:
                      userId:
                        type: boolean
                      notifications:
                        type: array
                        items:
                          type: object
                          properties:
                            content:
                              type: string
                            date:
                              type: number
                            viewed:
                              type: boolean
        '404':
          description: Not Found


  /user/invite:
    post:
      tags:
        - "User Management Routes"
      summary: create links for joning of new users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "abc@gmail.com"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        "404":
          description: Not Found
        401:
          description: Unauthorized
      security:
        - bearerAuth: []

  /user/acceptInvite:
    post:
      tags:
        - "User Management Routes"
      description: "Join user to the organisation by the given link"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: JWT token generated at the time of /user/invite
                firstname:
                  type: string
                lastname:
                  type: string
                password:
                  type: string

      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        404:
          description: Not Found
        401:
          description: Unauthorized

  /user/{userId}:
    put:
      tags:
        - "User Management Routes"
      description: "Update user records"
      parameters:
        - name: userId
          in: path
          description: User's id which has to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                active:
                  type: boolean
                lastname:
                  type: string
                firstname:
                  type: string
                jobTitle:
                  type: string
                phone:
                  type: string
                mobilePhone:
                  type: string
                country:
                  type: string
                image:
                  type: string
                locale:
                  type: string

      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        404:
          description: Not Found
        401:
          description: Unauthorized
      security:
        - bearerAuth: []

    delete:
      tags:
        - "User Management Routes"
      description: "Delete user records"
      parameters:
        - name: userId
          in: path
          description: User's id which has to be deleted
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        404:
          description: Not Found
        401:
          description: Unauthorized
      security:
        - bearerAuth: []

  /user/link/{userId}/{roleId}:
    put:
      tags:
        - "User Management Routes"
      description: "Link role to the given userId"
      parameters:
        - name: userId
          in: path
          description: User's id which has to be link with roles
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          description: role's id which has to be link with userId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        404:
          description: Not Found
        401:
          description: Unauthorized
      security:
        - bearerAuth: []

  /user/export/{type}:
    get:
      summary: Export users
      tags:
        - "User Routes"
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: path
          description: Type of export
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: Not Found

  /user/logout:
    post:
      tags:
        - "User Management Routes"
      description: "logout the current user"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        404:
          description: Not Found
        401:
          description: Unauthorized
      security:
        - bearerAuth: []

  # File-Upload Routes
  /file:
    post:
      tags:
        - "File-Upload Routes"
      description: "Upload Files to Server-DB"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  msg:
                    type: string
                    example: 5c7f16de348efb2b8c035bde # Example file ID
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

        401:
          description: Unauthorized
      security:
        - bearerAuth: []

  /file/{id}:
    get:
      tags:
        - "File-Upload Routes"
      description: "Retrieve File from Server-DB"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the file to retrieve
          schema:
            type: string
      responses:
        200:
          description: File retrieved successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        404:
          description: File not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

        401:
          description: Unauthorized
      security:
        - bearerAuth: []

  # Templates route
  /templates:
    get:
      tags:
        - "Template Routes"
      description: "Get all templates"
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: count
          schema:
            type: integer
          description: Number of templates per page
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  templates:
                    type: array
                    items:
                      type: string
                    example: []
        "404":
          description: Templates not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

        401:
          description: Unauthorized
      security:
        - bearerAuth: []

  # Control Routes
  /control/create:
    post:
      tags:
        - "Control Routes"
      description: "Create a control"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                name:
                  type: string
                group:
                  type: string
      responses:
        "200":
          description: Control created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        "404":
          description: Control not created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

        401:
          description: Unauthorized
      security:
        - bearerAuth: []

  /control/{id}:
    put:
      tags:
        - "Control Routes"
      description: "Update a control"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the control to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        "200":
          description: Control updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        "404":
          description: Control not found or not updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
        401:
          description: Unauthorized
      security:
        - bearerAuth: []

    delete:
      tags:
        - "Control Routes"
      description: "Delete a control"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the control to delete
          schema:
            type: string
      responses:
        "200":
          description: Control deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"

        "404":
          description: Control not found or not deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

        401:
          description: Unauthorized

      security:
        - bearerAuth: []
    
    post:
      summary: Update a control
      tags:
        - "Control Routes"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the control
      responses:
        '200':
          description: Projects associated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"

        '404':
          description: Control not found or risks association failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

    
  /control/groups:
    get:
      summary: Get all control groups
      tags:
        - "Control Routes"
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          required: true
          schema:
            type: integer
        - name: count
          in: query
          description: Number of items per page
          required: true
          schema:
            type: integer
        - name: search
          in: query
          description: Search query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  groups:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
        '404':
          description: Not Found

  /control/subControls:
    get:
      summary: Get sub-controls
      tags:
        - "Control Routes"
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: nameId
          required: true
          schema:
            type: string
        - in: query
          name: groupId
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  controls:
                    type: array
                    items:
                      type: object
                      properties:
                        nameId:
                          type: string
                        group:
                          type: string
                        name:
                          type: string
                        content:
                          type: string
                        policies:
                          type: string
                        projects:
                          type: string
                        risks:
                          type: string
                        tags:
                          type: string
                        processDocs:
                          type: string
                        evidences:
                          type: string
                        custom:
                          type: boolean
        '404':
          description: Not Found

  /control/:
    get:
      summary: Get all controls
      tags:
        - "Control Routes"
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          required: true
          schema:
            type: integer
        - name: count
          in: query
          description: Number of items per page
          required: true
          schema:
            type: integer
        - name: search
          in: query
          description: Search query
          required: false
          schema:
            type: string
        - name: group
          in: query
          description: Group ID
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  controls: 
                    type: array
                    items:
                      type: object
                      properties:
                        nameId:
                          type: string
                        group:
                          type: string
                        name:
                          type: string
                        content:
                          type: string
                        policies:
                          type: string
                        projects:
                          type: string
                        risks:
                          type: string
                        tags:
                          type: string
                        processDocs:
                          type: string
                        evidences:
                          type: string
                        custom:
                          type: boolean
                  
        '404':
          description: Not Found


  /control/{id}/procedures:
    post:
      summary: Associate procedures with a control
      security:
        - bearerAuth: []
      tags:
        - "Control Routes"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                procedures:
                  type: array
                  items:
                    type: string
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the control
      responses:
        '200':
          description: Procedures associated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Control not found or procedures association failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

    delete:
      summary: Unassign procedures with a control
      tags:
        - "Control Routes"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                procedures:
                  type: array
                  items:
                    type: string
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the control
      responses:
        '200':
          description: Procedures Unassign successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Control not found or procedures Unassign failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

  /control/{id}/projects:
    post:
      summary: Associate projects with a control
      tags:
        - "Control Routes"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                projects:
                  type: array
                  items:
                    type: string
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the control
      responses:
        '200':
          description: Projects associated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"

        '404':
          description: Control not found or projects association failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

    delete:
      summary: Unassign projects with a control
      tags:
        - "Control Routes"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                projects:
                  type: array
                  items:
                    type: string
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the control
      responses:
        '200':
          description: Projects unassign successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"

        '404':
          description: Control not found or projects Unassign failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

  /control/{id}/policies:
    post:
      summary: Associate policies with a control
      tags:
        - "Control Routes"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                policies:
                  type: array
                  items:
                    type: string
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the control
      responses:
        '200':
          description: Projects associated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"

        '404':
          description: Control not found or policies association failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
    delete:
      summary: Unassign policies with a control
      tags:
        - "Control Routes"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                policies:
                  type: array
                  items:
                    type: string
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the control
      responses:
        '200':
          description: Projects Unassign successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"

        '404':
          description: Control not found or policies Unassign failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

  /control/{id}/risks:
    post:
      summary: Associate risks with a control
      tags:
        - "Control Routes"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                risks:
                  type: array
                  items:
                    type: string
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the control
      responses:
        '200':
          description: Projects associated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"

        '404':
          description: Control not found or risks association failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
    delete:
      summary: Unassign risks with a control
      tags:
        - "Control Routes"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                risks:
                  type: array
                  items:
                    type: string
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the control
      responses:
        '200':
          description: Projects Unassign successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"

        '404':
          description: Control not found or risks Unassign failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"


  # Tags Routes
  /tag:
    get:
      tags:
        - "Tags Routes"
      description: "Get all tags"
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: count
          schema:
            type: integer
          description: Number of tags per page
        - in: query
          name: tagName
          schema:
            type: string
          description: Filter tags by name
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  tags:
                    type: array
                    items:
                      $ref: "#/components/schemas/Incomming_Tags"
        "404":
          description: Tags not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

        401:
          description: Unauthorized
      security:
        - bearerAuth: []

  /tag/{id}:
    get:
      tags:
        - "Tags Routes"
      description: "Get policies associated with a tag"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the tag
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: count
          schema:
            type: integer
          description: Number of policies per page
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  policies:
                    type: array
                    items:
                      type: string
                      example: "646085c40a5021e6d0805eae"
        "404":
          description: Tag not found or policies not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
        401:
          description: Unauthorized

      security:
        - bearerAuth: []

    delete:
      tags:
        - "Tags Routes"
      description: "Delete a tag"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the tag
          schema:
            type: string
      responses:
        "200":
          description: Tag deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"

        "404":
          description: Tag not found or not deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
        401:
          description: Unauthorized

      security:
        - bearerAuth: []

  /tag/{id}/{name}:
    put:
      tags:
        - "Tags Routes"
      description: "Update the name of a tag"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the tag
          schema:
            type: string
        - in: path
          name: name
          required: true
          description: New name for the tag
          schema:
            type: string
      responses:
        "200":
          description: Tag name updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        "404":
          description: Tag not found or name not updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

        401:
          description: Unauthorized
      security:
        - bearerAuth: []

  /tag/{id}/policies:
    delete:
      tags:
        - "Tags Routes"
      description: "Remove a tag from multiple policies"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the tag
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                policies:
                  type: array
                  items:
                    type: string
                  description: List of policy IDs
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"

        "404":
          description: Tag not found or policies not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
        401:
          description: Unauthorized
      security:
        - bearerAuth: []

  # Onboarding Routes
  /onboarding:
    post:
      tags:
        - "Onboarding Routes"
      description: "Create onboarding"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Onboarding"
      responses:
        "200":
          description: Onboarding created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"

        "404":
          description: Onboarding creation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

        "401":
          description: Unauthorized
      security:
        - bearerAuth: []
    
    get:
      tags:
        - "Onboarding Routes"
      description: "Get onboarding"
      responses:
        "200":
          description: Onboarding created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Onboarding"

        "404":
          description: Onboarding retrive failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

    put:
      tags:
        - "Onboarding Routes"
      description: "Update onboarding"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Onboarding"
      responses:
        "200":
          description: Onboarding updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"

        "404":
          description: Onboarding update failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

  # Logs Routes
  /logs:
    get:
      tags:
        - "Log Routes"
      description: "Retrieve logs"
      parameters:
        - in: query
          name: page
          required: true
          description: Page number
          schema:
            type: integer
        - in: query
          name: count
          required: true
          description: Number of logs per page
          schema:
            type: integer
        - in: query
          name: sortByDate
          required: true
          description: Sort logs by date
          schema:
            type: integer
      responses:
        "200":
          description: Logs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/LogsData"
        "404":
          description: Logs retrieval failed or invalid parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

  /logs/policy/{id}:
    get:
      tags:
        - "Log Routes"
      description: "Retrieve logs for a specific policy"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the policy
          schema:
            type: string
      responses:
        "200":
          description: Logs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/LogsData"
        "404":
          description: Logs retrieval failed or policy not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

  # Roles Management Route
  /roles:
    post:
      tags:
        - "Roles Management Route"
      description: "Create a role"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleInterface"
      responses:
        "200":
          description: Role created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        "404":
          description: Role creation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

    get:
      summary: Retrieve roles
      tags:
        - Roles Management Route
      parameters:
        - in: query
          name: page
          required: true
          schema:
            type: integer
        - in: query
          name: count
          required: true
          schema:
            type: integer
        - in: query
          name: name
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: boolean
                    default: true
                  roles:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        _id:
                          type: string
              
        '401':
          description: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
      security:
        - bearerAuth: []

  /roles/count:
    get:
      tags:
        - "Roles Management Route"
      description: "Retrieve total count of roles"
      responses:
        "200":
          description: Retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  count:
                    type: number
                    example: 10
                        
        "404":
          description: roles counting failed or roles not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

  /roles/{id}:
    put:
      summary: Update a role
      tags:
        - Roles Management Route
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleInterface'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      security:
        - bearerAuth: []
    delete:
      tags:
        - "Roles Management Route"
      description: "Delete a role by ID"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the role to delete
          schema:
            type: string
      responses:
        "200":
          description: Role deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        "404":
          description: Role deletion failed or role not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

  # 3rd Party Risk Assessment Route
  /tpr:
    post:
      tags:
        - "3rd Party Risk Assessment Route"
      description: "Create a TPR"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TPR_OutgoingInterface"
      responses:
        "200":
          description: TPR created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        "404":
          description: TPR creation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

    get:
      tags:
        - "3rd Party Risk Assessment Route"
      description: "Retrieve TPRs by page and count"
      parameters:
        - in: query
          name: page
          required: true
          description: Page number
          schema:
            type: integer
        - in: query
          name: count
          required: true
          description: Number of TPRs per page
          schema:
            type: integer
      responses:
        "200":
          description: TPRs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/ListOfTRP_Forms"
        "404":
          description: TPR retrieval failed or TPRs not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

  /tpr/{id}:
    delete:
      tags:
        - "3rd Party Risk Assessment Route"
      description: "Delete a TPR by ID"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the TPR to delete
          schema:
            type: string
      responses:
        "200":
          description: TPR deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"

        "404":
          description: TPR deletion failed or TPR not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

    get:
      tags:
        - "3rd Party Risk Assessment Route"
      description: "Retrieve a TPR by ID"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the TPR to retrieve
          schema:
            type: string
      responses:
        "200":
          description: TPR retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/TPR_IncomingInterface"

        "404":
          description: TPR retrieval failed or TPR not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

  /tpr/{id}/ans:
    put:
      tags:
        - "3rd Party Risk Assessment Route"
      description: "Update TPR answers by ID"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the TPR to update answers
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  answer:
                    type: string

      responses:
        "200":
          description: TPR answers updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        "404":
          description: TPR answer update failed or TPR not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

  /tpr/{id}/approve:
    put:
      tags:
        - "3rd Party Risk Assessment Route"
      description: "Set TPR approval status by ID"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the TPR to update approval status
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                approve:
                  type: boolean
      responses:
        "200":
          description: TPR approval status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        "404":
          description: TPR approval status update failed or TPR not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

  # Policy Related Routes
  /policy/create:
    post:
      tags:
        - "Policy Routes"
      description: "Create a policy"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyCreate"
      responses:
        "200":
          description: Policy created successfully
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: boolean
                    default: true
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "64410f9eb6f82aada0625a94"
                      nameId:
                        type: string
                        example: 101
                  
        "404":
          description: Policy creation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

  /policy/{id}/comment:
    post:
      tags:
        - "Policy Routes"
      description: "Add a comment to a policy"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the policy to add a comment to
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                      type: string
                  example:
                    ["64410f9eb6f82aada0625a94", "64410f9eb6f82aada0625a94"]
                comment:
                  type: array
                  items:
                      type: string
                  example:
                    ["64410f9eb6f82aada0625a94", "64410f9eb6f82aada0625a94"]

      responses:
        "200":
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        "404":
          description: Adding comment to policy failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []
  
  /policy/{id}/comment/{commentId}:
    delete:
      tags:
        - "Policy Routes"
      summary: "Delete a comment on a policy"
      description: "This endpoint deletes a specific comment on a policy version."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the policy."
        - name: commentId
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the comment."
      responses:
        '200':
          description: "Comment deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

  /policy/{id}/reminder:
    put:
      tags:
        - "Policy Routes"
      description: "Set a reminder for a policy"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the policy to set a reminder for
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                next_reminder:
                  type: integer
                  example: 1686720766
      responses:
        "200":
          description: Reminder set successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"

        "404":
          description: Setting reminder for policy failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

  /policy/{id}/tags:
    post:
      tags:
        - "Policy Routes"
      description: "Add tags to a policy"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the policy to add tags to
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                tags:
                  $ref: "#/components/schemas/Outgoing_Tags"
      responses:
        "200":
          description: Tags added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"

        "404":
          description: Adding tags to policy failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

    delete:
      tags:
        - "Policy Routes"
      summary: "Delete tags from a policy"
      description: "This endpoint deletes specific tags from a policy."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the policy."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  type: array
                  items:
                    type: string
                  description: "List of tags to delete from the policy."
      responses:
        '200':
          description: "Tags deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

  /policy/{id}/procedures:
    post:
      tags:
        - "Policy Routes"
      summary: "Map one policy to many procedures"
      description: "This endpoint maps one policy to multiple procedures."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the policy."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                procedures:
                  type: array
                  items:
                    type: string
                  description: "Array of procedure IDs."
              required:
                - procedures
      responses:
        '200':
          description: "Mapping successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"

        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError" 

    delete:
      tags:
        - "Policy Routes"
      summary: "Unmap procedures from policy"
      description: "This endpoint unmaps procedures from a specific policy."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the policy."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                procedures:
                  type: array
                  items:
                    type: string
                  description: "Array of procedure IDs to unmap."
      responses:
        '200':
          description: "Procedures unmapped from policy successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

  /policy/{id}/projects:
    post:
      tags:
        - "Policy Routes"
      summary: "Map one policy to many projects"
      description: "This endpoint maps one policy to multiple projects."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the policy."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                projects:
                  type: array
                  items:
                    type: string
                  description: "Array of project IDs."
              required:
                - projects
      responses:
        '200':
          description: "Mapping successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"

        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

    delete:
      tags:
        - "Policy Routes"
      summary: "Unmap projects from policy"
      description: "This endpoint unmaps projects from a specific policy."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the policy."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                projects:
                  type: array
                  items:
                    type: string
                  description: "Array of project IDs to unmap."
      responses:
        '200':
          description: "Projects unmapped from policy successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

  /policy/{id}/controls:
    post:
      tags:
        - "Policy Routes"
      summary: "Map one policy to many controls"
      description: "This endpoint maps one policy to multiple controls."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the policy."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                controls:
                  type: array
                  items:
                    type: string
                  description: "Array of control IDs."
              required:
                - controls
      responses:
        '200':
          description: "Mapping successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"

        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

    delete:
      tags:
        - "Policy Routes"
      summary: "Unmap controls from policy"
      description: "This endpoint unmaps controls from a specific policy."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the policy."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                controls:
                  type: array
                  items:
                    type: string
                  description: "Array of control IDs to unmap."
      responses:
        '200':
          description: "Controls unmapped from policy successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

  /policy:
    get:
      tags:
        - "Policy Routes"
      description: "Retrieve all policies"
      parameters:
        - in: query
          name: page
          required: true
          description: Page number for pagination
          schema:
            type: integer
        - in: query
          name: count
          required: true
          description: Number of policies per page
          schema:
            type: integer
        - in: query
          name: field
          description: Field to sort the policies by
          schema:
            type: string
            default: updated_at
        - in: query
          name: order
          description: Sort order (asc or desc)
          schema:
            type: string
            default: asc
        - in: query
          name: search
          description: search query (search in title and it's id)
          schema:
            type: string
      responses:
        "200":
          description: Policies retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  count:
                    type: number
                    example: 10
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        ID:
                          type: number
                        
                        title:
                          type: string
                        
                        tags:
                          type: object

                        assignees:
                          type: array
                          items:
                            type: string
                        
                        created_by:
                          type: string
                        
                        updated_at:
                          type: string
                          format: date
                          
                        status:
                          type: string
                        
        "404":
          description: Policy retrieval failed or policies not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

  /policy/overview:
    get:
      tags:
        - "Policy Routes"
      description: "Get policies overview"
      responses:
        "200":
          description: Overview retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      "Total Count":
                        type: integer
                      Active:
                        type: integer
                      Inactive:
                        type: integer
                      "In Draft":
                        type: integer
                      "In Review":
                        type: integer
                        
        "404":
          description: Policy retrieval failed or policies not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

  /policy/fromTemplate:
    post:
      tags:
        - "Policy Routes"
      summary: "Create a policy from a template"
      description: "This endpoint creates a policy from given templates."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                projectId:
                  type: string
                  description: "The ID of the project."
                templateIds:
                  type: array
                  items:
                    type: string
                  description: "Array of template IDs."
                assignees:
                  type: object
                  properties:
                    author:
                      type: array
                      items:
                        type: string
                    reviewer:
                      type: array
                      items:
                        type: string
                    approver:
                      type: array
                      items:
                        type: string
                  description: "list of assignee IDs."
              required:
                - projectId
                - templateIds
                - assignees
      responses:
        '200':
          description: "Policy created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
        '404':
          description: Not found
          content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ResponseWithMsgError"

  /policy/create/file:
    post:
      tags:
        - "Policy Routes"
      summary: "Create a policy from an uploaded file"
      description: "This endpoint creates a policy from an uploaded file."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: "The file to upload and convert."
      responses:
        '200':
          description: "File processed and policy created successfully"
          content:
            text/markdown:
              schema:
                type: string
        '400':
          description: "Bad request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  msg:
                    type: string

  /policy/{id}/comments:
    get:
      tags:
        - "Policy Routes"
      description: "Retrieve comments for a policy"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the policy to retrieve comments for
          schema:
            type: string
        - in: query
          name: page
          required: true
          description: Page number for pagination
          schema:
            type: integer
        - in: query
          name: count
          required: true
          description: Number of comments per page
          schema:
            type: integer
      responses:
        "200":
          description: Comments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  comment:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        content:
                          type: string
                        images:
                          type: array
                          items:
                            type: string
                        created_by:
                          type: string
                        created_at:
                          type: string
                          format: date-time
                        __v:
                          type: integer

        "404":
          description: Comment retrieval failed or comments not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

  /policy/{id}:
    get:
      tags:
        - "Policy Routes"
      description: "Retrieve a policy by ID"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the policy to retrieve
          schema:
            type: string
      responses:
        "200":
          description: Policy retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  policy:
                    $ref: "#/components/schemas/Policy"
        "404":
          description: Policy retrieval failed or policy not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

    put:
      tags:
        - "Policy Routes"
      summary: "Update policy version details"
      description: "This endpoint updates the details of a specific policy version."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the policy."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: "Title of the policy."
                description:
                  type: string
                  description: "Description of the policy."
                content:
                  type: string
                  description: "Content of the policy."
                beingModified:
                  type: boolean
                  description: "Modification status of the policy."
      responses:
        '200':
          description: "Policy version updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

    delete:
      tags:
        - "Policy Routes"
      summary: "Delete a policy"
      description: "This endpoint deletes a specific policy."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the policy."
      responses:
        '200':
          description: "Policy deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

  /policy/{id}/version/{versionId}:
    get:
      tags:
        - "Policy Routes"
      description: "Retrieve a specific version of a policy"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the policy to retrieve the version from
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          description: ID of the version to retrieve
          schema:
            type: string
      responses:
        "200":
          description: Version retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  version:
                    $ref: "#/components/schemas/IncommingPolicyVersion"
        "404":
          description: Version retrieval failed or version not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

    delete:
      tags:
        - "Policy Routes"
      summary: "Delete policy version"
      description: "This endpoint deletes a specific version of a policy."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the policy."
        - name: versionId
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the policy version."
      responses:
        '200':
          description: "Policy version deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

  /policy/export/{id}:
    get:
      tags:
        - "Policy Routes"
      description: "Export a policy as a PDF"
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the policy to export
          schema:
            type: string
      responses:
        "200":
          description: Policy exported successfully
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        "404":
          description: Policy export failed or policy not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

  /policy/create/version:
    post:
      tags:
        - "Policy Routes"
      summary: "Create a new version of a policy"
      description: "This endpoint creates a new version of an existing policy."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                policyId:
                  type: string
                  description: "The ID of the policy."
                description:
                  type: string
                  description: "Description of the policy version."
                assignees:
                  type: array
                  items:
                    type: string
                  description: "Array of assignee IDs."
              required:
                - policyId
                - description
                - assignees
      responses:
        '200':
          description: "Policy version created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"

        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

  /policy/{id}/assignUser:
    put:
      tags:
        - "Policy Routes"
      summary: "Assign user to policy"
      description: "This endpoint assigns a user to a specific policy."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the policy."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                author:
                  type: array
                  items:
                    type: string
                reviewer:
                  type: array
                  items:
                    type: string
                approver:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: "User assigned to policy successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
  
  /policy/{id}/unAssignUser:
    delete:
      tags:
        - "Policy Routes"
      summary: "Unassign user from policy version"
      description: "This endpoint unassigns a user from a specific version of a policy."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the policy."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                author:
                  type: array
                  items:
                    type: string
                reviewer:
                  type: array
                  items:
                    type: string
                approver:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: "User unassigned from policy version successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

  /policy/{versionId}/status/{type}:
    put:
      tags:
        - "Policy Routes"
      summary: "Change policy version status"
      description: "This endpoint changes the status of a specific policy version."
      security:
        - bearerAuth: []
      parameters:
        - name: versionId
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the policy version."
        - name: type
          in: path
          required: true
          schema:
            type: string
          description: "The type of status change."
      responses:
        '200':
          description: "Policy version status changed successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

  # Risk Routes
  /risks:
    post:
      summary: Create a risk
      tags:
        - Risk Routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RiskInput'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsg'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
      security:
        - bearerAuth: []
    get:
      summary: Retrieve All risks
      tags:
        - Risk Routes
      parameters:
        - in: query
          name: page
          required: true
          schema:
            type: integer
        - in: query
          name: count
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RisksApiResponse'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
      security:
        - bearerAuth: []
  
  /risks/{riskId}/comments:
    get:
      summary: Retrieve comments for a risk
      tags:
        - Risk Routes
      parameters:
        - in: path
          name: riskId
          required: true
          schema:
            type: string
        - in: query
          name: page
          required: true
          schema:
            type: integer
        - in: query
          name: count
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      security:
        - bearerAuth: []

    post:
      summary: Create a comment for a risk
      tags:
        - Risk Routes
      parameters:
        - in: path
          name: riskId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentInput'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsg'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
      security:
        - bearerAuth: []

  /risks/tags/{riskId}:
    get:
      summary: Retrieve tags for a risk
      tags:
        - Risk Routes
      parameters:
        - in: path
          name: riskId
          required: true
          schema:
            type: string
        - in: query
          name: page
          required: true
          schema:
            type: integer
        - in: query
          name: count
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    default: true
                  tags:
                    type: array
                    items:
                      type: string
                    example: ["64981e9189aa814d71194e45","64981e9189aa814d71194e44"]
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      security:
        - bearerAuth: []
  
    post:
      summary: Add tags to a risk
      tags:
        - Risk Routes
      parameters:
        - in: path
          name: riskId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Outgoing_Tags'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsg'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
      security:
        - bearerAuth: []
 
    delete:
      summary: Remove tags from a risk
      tags:
        - Risk Routes
      parameters:
        - in: path
          name: riskId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags: 
                  type: array
                  items:
                    type: string
                  example: ["6496de9a100585e48f77c6dd","6496de9a100585e48f77c6de"]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsg'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
      security:
        - bearerAuth: []

  /risks/{riskId}:
    get:
      summary: Retrieve a risk by ID
      tags:
        - Risk Routes
      parameters:
        - in: path
          name: riskId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  risk:
                    $ref: "#/components/schemas/Risk"
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      security:
        - bearerAuth: []
    put:
      summary: Update a risk
      tags:
        - Risk Routes
      parameters:
        - in: path
          name: riskId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsg'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
      security:
        - bearerAuth: []
    delete:
      summary: Delete a risk
      tags:
        - Risk Routes
      parameters:
        - in: path
          name: riskId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsg'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
      security:
        - bearerAuth: []
  
  /risk/{id}/status/{type}:
    put:
      tags:
        - "Risk Routes"
      summary: "Change risk status"
      description: "This endpoint changes the status of a risk."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the risk."
        - name: type
          in: path
          required: true
          schema:
            type: string
          description: "The type of status to change to."
      responses:
        '200':
          description: "Risk status changed successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

  /risk/{id}/version/{name}:
    post:
      tags:
        - "Risk Routes"
      summary: "Save risk version"
      description: "This endpoint saves a version of a risk."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the risk."
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: "The name of the risk version."
      responses:
        '200':
          description: "Risk version saved successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  version:
                    type: string
        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

  /risk/version/{versionId}:
    get:
      tags:
        - "Risk Routes"
      summary: "Get risk version"
      description: "This endpoint retrieves a specific version of a risk."
      security:
        - bearerAuth: []
      parameters:
        - name: versionId
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the risk version."
      responses:
        '200':
          description: "Risk version retrieved successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  version:
                    $ref: '#/components/schemas/RiskSchemaVersion'

        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
  
  /risk/{id}/version/{versionId}:
    delete:
      tags:
        - "Risk Routes"
      summary: "Delete risk version"
      description: "This endpoint deletes a specific version of a risk."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the risk."
        - name: versionId
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the risk version."
      responses:
        '200':
          description: "Risk version deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

  /risk/{id}/assignUser:
    put:
      tags:
        - "Risk Routes"
      summary: "Assign user to risk"
      description: "This endpoint assigns a user to a risk."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the risk."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                author:
                  type: array
                  items:
                    type: string
                reviewer:
                  type: array
                  items:
                    type: string
                approver:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: "User assigned to risk successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

  /risk/{id}/unAssignUser:
    delete:
      tags:
        - "Risk Routes"
      summary: "Unassign user from risk"
      description: "This endpoint unassigns a user from a risk."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                author:
                  type: array
                  items:
                    type: string
                reviewer:
                  type: array
                  items:
                    type: string
                approver:
                  type: array
                  items:
                    type: string
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the risk."
      responses:
        '200':
          description: "User unassigned from risk successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

  /risk/{id}/projects:
    post:
      tags:
        - "Risk Routes"
      summary: "Map projects to risk"
      description: "This endpoint maps projects to a risk."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the risk."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                projects:
                  type: array
                  items:
                    type: string
                  description: "Array of project IDs to map."
      responses:
        '200':
          description: "Projects mapped to risk successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

    delete:
      tags:
        - "Risk Routes"
      summary: "Unmap projects from risk"
      description: "This endpoint unmaps projects from a risk."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the risk."
      responses:
        '200':
          description: "Projects unmapped from risk successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

  /risk/{id}/controls:
    post:
      tags:
        - "Risk Routes"
      summary: "Map controls to risk"
      description: "This endpoint maps controls to a risk."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the risk."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                controls:
                  type: array
                  items:
                    type: string
                  description: "Array of control IDs to map."
      responses:
        '200':
          description: "Controls mapped to risk successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

    delete:
      tags:
        - "Risk Routes"
      summary: "Unmap controls from risk"
      description: "This endpoint unmaps controls from a risk."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the risk."
      responses:
        '200':
          description: "Controls unmapped from risk successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

  /risks/{riskId}/comments/{commentId}:
    delete:
      summary: Delete a comment for a risk
      tags:
        - Risk Routes
      parameters:
        - in: path
          name: riskId
          required: true
          schema:
            type: string
        - in: path
          name: commentId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsg'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
      security:
        - bearerAuth: []
  
  /risk/export/{type}:
    get:
      tags:
        - "Risk Routes"
      summary: "Export risks"
      description: "This endpoint exports risks data."
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
          description: "The type of export."
      responses:
        '200':
          description: "Risks data exported successfully"
          
        '404':
          description: "Resource not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"

  /risk/metadata:
    get:
      tags:
        - "Risk Routes"
      summary: "Get risk metadata"
      description: "This endpoint retrieves metadata related to risks."
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "Metadata retrieved successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  formula:
                    type: string
                  desc:
                    type: object
                    properties:
                      likelihood:
                        type: array
                        items:
                          $ref: "#/components/schemas/MasterRecordInterfaceForRisk"
                        description: "Array of likelihood master records"
                      impact:
                        type: array
                        items:
                          $ref: "#/components/schemas/MasterRecordInterfaceForRisk"
                        description: "Array of impact master records"
                      risk:
                        type: array
                        items:
                          $ref: "#/components/schemas/MasterRecordInterfaceForRisk"
                        description: "Array of risk master records" 
        '404':
          description: "Resource not found"

  # Scopes
  /scopes:
    post:
      summary: Create a new scope
      tags:
        - Scopes
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the scope.
                description:
                  type: string
                  description: The description of the scope.
              required:
                - name
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []
        
    get:
      summary: Retrieve scopes
      tags:
        - Scopes
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            description: The page number.
        - in: query
          name: count
          schema:
            type: integer
            description: The number of items per page.
        - in: query
          name: scopeName
          schema:
            type: string
            description: Filter scopes by name.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllScopes'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []
    
  /scopes/{id}:
    put:
      summary: Update a scope
      tags:
        - Scopes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the scope to update.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The new name of the scope.
                description:
                  type: string
                  description: The new description of the scope.
              required:
                - name
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsg'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []
    delete:
      summary: Delete a scope
      tags:
        - Scopes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the scope to delete.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsg'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

  /scopes/{id}/projects:
    post:
      summary: Link a scope to projects
      tags:
        - Scopes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the scope to link to projects.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                projects:
                  type: array
                  items:
                    type: string
                  description: An array of project IDs to link to the scope.
              required:
                - projects
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsg'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []
    delete:
      summary: Unlink a scope from projects
      tags:
        - Scopes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the scope to unlink from projects.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                projects:
                  type: array
                  items:
                    type: string
                  description: An array of project IDs to unlink from the scope.
              required:
                - projects
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsg'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError' 
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

  # EVIDENCE
  /evidences:
    post:
      summary: Create a new evidence
      tags:
        - Evidences
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the evidence.
                frequency:
                  type: string
                  description: The frequency of the evidence.
                files:
                  type: array
                  items:
                    type: string
                    description: Files related to the evidence.
                url:
                  type: array
                  items:
                    type: string
                    description: URL of the evidence.
                assignee:
                  type: array
                  items:
                    type: string
                    description: Id of assignees
                controls:
                  type: array
                  items:
                    type: string
                    description: Id of controls
                risks:
                  type: array
                  items:
                    type: string
                    description: Id of riskss
              required:
                - name
                - frequency
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

    get:
      summary: Retrieve evidences
      tags:
        - Evidences
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            description: The page number.
        - in: query
          name: count
          schema:
            type: integer
            description: The number of items per page.
        - in: query
          name: evidenceName
          schema:
            type: string
            description: Filter evidences by name.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllEvidences'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

  /evidences/{id}:
    get:
      summary: Retrieve a specific evidence by ID
      tags:
        - Evidences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: The ID of the evidence to retrieve.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEvidence'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

    put:
      summary: Update a specific evidence by ID
      tags:
        - Evidences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: The ID of the evidence to update.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The updated name of the evidence.
                frequency:
                  type: string
                  description: The updated frequency of the evidence.
                url:
                  type: string
                  description: The updated URL of the evidence.
              required:
                - name
                - frequency
                - url
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

    delete:
      summary: Delete a specific evidence by ID
      tags:
        - Evidences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: The ID of the evidence to delete.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

  /evidences/{id}/risks:
    put:
      summary: Link an evidence to one or more risks
      tags:
        - Evidences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: The ID of the evidence to link to risks.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                risks:
                  type: array
                  items:
                    type: string
                    description: The IDs of the risks to link to the evidence.
              required:
                - risks
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

    delete:
      summary: Remove the evidence from one or more risks
      tags:
        - Evidences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: The ID of the evidence to remove from risks.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                risks:
                  type: array
                  items:
                    type: string
                    description: The IDs of the risks from which to remove the evidence.
              required:
                - risks
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []


  /evidences/{id}/controls:
    put:
      summary: Link an evidence to one or more controls
      tags:
        - Evidences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: The ID of the evidence to link to controls.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                controls:
                  type: array
                  items:
                    type: string
                    description: The IDs of the controls to link to the evidence.
              required:
                - controls
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

    delete:
      summary: Remove the evidence from one or more controls
      tags:
        - Evidences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: The ID of the evidence to remove from controls.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                controls:
                  type: array
                  items:
                    type: string
                    description: The IDs of the controls from which to remove the evidence.
              required:
                - controls
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

  /evidences/{id}/assignee:
    put:
      summary: Assign an evidence to an assignee
      tags:
        - Evidences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: The ID of the evidence to assign.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                assignee:
                  type: string
                  description: The ID of the assignee.
              required:
                - assignee
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

    delete:
      summary: Remove the evidence's assignee
      tags:
        - Evidences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: The ID of the evidence to remove the assignee from.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                assignee:
                  type: string
                  description: The ID of the assignee to remove.
              required:
                - assignee
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []


  /evidences/{id}/files:
    put:
      summary: Add files to an evidence
      tags:
        - Evidences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: The ID of the evidence to add files to.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    description: URL of files to add to the evidence.
              required:
                - files
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

    delete:
      summary: Remove files from the evidence
      tags:
        - Evidences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: The ID of the evidence from which to remove files.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    description: URLs of the files to remove from the evidence.
              required:
                - files
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMsgError'
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

  # PROCEDURES ARE NOW PROCESS_DOCS
  # /procedure/create:
  #   post:
  #     tags:
  #       - "Procedure Routes"
  #     summary: "Create a new procedure"
  #     description: "This endpoint creates a new procedure."
  #     security:
  #       - bearerAuth: []
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/IncomingProcedureCreateData"
  #     responses:
  #       '200':
  #         description: "Procedure created successfully"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ResponseWithMsg"
  #       '404':
  #         description: "Resource not found"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ResponseWithMsgError"

  # /procedure/{id}/comment:
  #   post:
  #     tags:
  #       - "Procedure Routes"
  #     summary: "Save a comment for a procedure"
  #     description: "This endpoint saves a comment for a specific procedure."
  #     security:
  #       - bearerAuth: []
  #     parameters:
  #       - in: path
  #         name: id
  #         required: true
  #         schema:
  #           type: string
  #         description: "ID of the procedure"
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               images:
  #                 type: array
  #                 items:
  #                   type: string
  #                 description: "Array of image URLs"
  #               comment:
  #                 type: string
  #                 description: "Comment for the procedure"
  #     responses:
  #       '200':
  #         description: "Comment saved successfully"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ResponseWithMsg"
  #       '404':
  #         description: "Resource not found"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ResponseWithMsgError"

  # /procedure/{id}/version/{name}:
  #   post:
  #     tags:
  #       - "Procedure Routes"
  #     summary: "Save a version for a procedure"
  #     description: "This endpoint saves a new version for a specific procedure."
  #     security:
  #       - bearerAuth: []
  #     parameters:
  #       - in: path
  #         name: id
  #         required: true
  #         schema:
  #           type: string
  #         description: "ID of the procedure"
  #       - in: path
  #         name: name
  #         required: true
  #         schema:
  #           type: string
  #         description: "Name of the version"
  #     responses:
  #       '200':
  #         description: "Version saved successfully"
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 status:
  #                   type: boolean
  #                 version:
  #                   type: string

  #       '404':
  #         description: "Resource not found"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ResponseWithMsgError"
 
  # /procedure/{id}/reminder:
  #   post:
  #     tags:
  #       - "Procedure Routes"
  #     summary: "Set a reminder for a procedure"
  #     description: "This endpoint sets a reminder for a specific procedure."
  #     security:
  #       - bearerAuth: []
  #     parameters:
  #       - in: path
  #         name: id
  #         required: true
  #         schema:
  #           type: string
  #         description: "ID of the procedure"
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               next_reminder:
  #                 type: string
  #                 format: date-time
  #                 description: "Date and time of the next reminder"
  #     responses:
  #       '200':
  #         description: "Reminder set successfully"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ResponseWithMsg"
  #       '404':
  #         description: "Resource not found"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ResponseWithMsgError"
  
  # /procedure/{id}/tags:
  #   post:
  #     tags:
  #       - "Procedure Routes"
  #     summary: "Add tags to a procedure"
  #     description: "This endpoint adds tags to a specific procedure."
  #     security:
  #       - bearerAuth: []
  #     parameters:
  #       - in: path
  #         name: id
  #         required: true
  #         schema:
  #           type: string
  #         description: "ID of the procedure"
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               tags:
  #                 type: array
  #                 items:
  #                   type: object
  #                   properties:
  #                     listed:
  #                       type: array
  #                       items:
  #                         type: string
  #                         description: "Array of listed tags"
  #                     unlisted:
  #                       type: array
  #                       items:
  #                         type: string
  #                         description: "Array of unlisted tags"
  #                 description: "Array of tags to be added to the procedure"
  #     responses:
  #       '200':
  #         description: "Tags added successfully"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ResponseWithMsg"
  #       '404':
  #         description: "Resource not found"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ResponseWithMsgError"
  
  # /procedure/{id}/policies:
  #   post:
  #     tags:
  #       - "Procedure Routes"
  #     summary: "Map procedures to policies"
  #     description: "This endpoint maps procedures to policies."
  #     security:
  #       - bearerAuth: []
  #     parameters:
  #       - in: path
  #         name: id
  #         required: true
  #         schema:
  #           type: string
  #         description: "ID of the procedure"
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               procedures:
  #                 type: array
  #                 items:
  #                   type: string
  #                 description: "Array of policy IDs to map to the procedure"
  #     responses:
  #       '200':
  #         description: "Procedures mapped successfully"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ResponseWithMsg"
  #       '404':
  #         description: "Resource not found"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ResponseWithMsgError"
  
  # /procedure/{id}/projects:
  #   post:
  #     tags:
  #       - "Procedure Routes"
  #     summary: "Map procedure to projects"
  #     description: "This endpoint maps a procedure to projects."
  #     security:
  #       - bearerAuth: []
  #     parameters:
  #       - in: path
  #         name: id
  #         required: true
  #         schema:
  #           type: string
  #         description: "ID of the procedure"
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               projects:
  #                 type: array
  #                 items:
  #                   type: string
  #                 description: "Array of project IDs to map to the procedure"
  #     responses:
  #       '200':
  #         description: "Procedure mapped to projects successfully"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ResponseWithMsg"
  #       '404':
  #         description: "Resource not found"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ResponseWithMsgError"

  # /procedure/{id}/controls:
  #   post:
  #     summary: Map controls to a procedure
  #     tags:
  #       - "Procedure Routes"
  #     parameters:
  #       - in: path
  #         name: id
  #         required: true
  #         schema:
  #           type: string
  #         description: "ID of the procedure to map controls to"
  #     requestBody:
  #         required: true
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 controls:
  #                   type: array
  #                   items:
  #                     type: string
  #                   description: "Array of controls IDs to map to the procedure"
  #     responses:
  #       '200':
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ResponseWithMsg"
  #       '404':
  #         description: Not Found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ResponseWithMsgError"
  #     security:
  #       - bearerAuth: []

  # /procedure:
  #   get:
  #     summary: Get all procedures
  #     tags:
  #       - "Procedure Routes"
  #     parameters:
  #       - in: query
  #         name: page
  #         schema:
  #           type: string
  #         description: Page number
  #       - in: query
  #         name: count
  #         schema:
  #           type: string
  #         description: Number of procedures per page
  #       - in: query
  #         name: field
  #         schema:
  #           type: string
  #         description: Field to sort by
  #       - in: query
  #         name: order
  #         schema:
  #           type: string
  #         description: Sorting order
  #     responses:
  #       '200':
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 status:
  #                   type: boolean
  #                   example: true
  #                 data:
  #                   type: array
  #                   items:
  #                     type: object
  #                     properties:
  #                       title:
  #                         type: string
                        
  #                       description:
  #                         type: string

  #                       beingModified:
  #                         type: string
                        
  #                       created_by:
  #                         type: string
                        
  #                       updated_at:
  #                         type: string
  #                         format: date
                          
  #                       status:
  #                         type: string
  #       '404':
  #         description: Not Found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ResponseWithMsgError"
  #     security:
  #       - bearerAuth: []

  # /procedure/count:
  #   get:
  #     summary: Get total count of procedures
  #     tags:
  #       - "Procedure Routes"
  #     responses:
  #       '200':
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 status:
  #                   type: boolean
  #                 count:
  #                   type: number

  #       '404':
  #         description: Not Found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ResponseWithMsgError"
  #     security:
  #       - bearerAuth: []

  # /procedure/{id}/comments:
  #   get:
  #     summary: Get comments for a procedure
  #     tags:
  #       - "Procedure Routes"
  #     parameters:
  #       - in: path
  #         name: id
  #         required: true
  #         schema:
  #           type: string
  #         description: ID of the procedure
  #       - in: query
  #         name: page
  #         schema:
  #           type: string
  #         description: Page number
  #       - in: query
  #         name: count
  #         schema:
  #           type: string
  #         description: Number of comments per page
  #     responses:
  #       "200":
  #           description: Comments retrieved successfully
  #           content:
  #             application/json:
  #               schema:
  #                 type: object
  #                 properties:
  #                   status:
  #                     type: boolean
  #                     example: true
  #                   comment:
  #                     type: array
  #                     items:
  #                       type: object
  #                       properties:
  #                         _id:
  #                           type: string
  #                         content:
  #                           type: string
  #                         images:
  #                           type: array
  #                           items:
  #                             type: string
  #                         created_by:
  #                           type: string
  #                         created_at:
  #                           type: string
  #                           format: date-time
  #                         __v:
  #                           type: integer
  #       '404':
  #         description: Not Found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ResponseWithMsgError"
  #     security:
  #       - bearerAuth: []

  # /procedure/{id}:
  #   get:
  #     summary: Get a procedure by ID
  #     tags:
  #       - "Procedure Routes"
  #     parameters:
  #       - in: path
  #         name: id
  #         required: true
  #         schema:
  #           type: string
  #         description: ID of the procedure
  #     responses:
  #       '200':
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 status: 
  #                   type: boolean
  #                 procedure:
  #                   $ref: "#/components/schemas/GetProcedure"
  #       '404':
  #         description: Not Found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ResponseWithMsgError"
  #     security:
  #       - bearerAuth: []

  # /procedure/version/{versionId}:
  #   get:
  #     summary: Get a procedure version by ID
  #     tags:
  #       - "Procedure Routes"
  #     parameters:
  #       - in: path
  #         name: versionId
  #         required: true
  #         schema:
  #           type: string
  #         description: ID of the procedure version
  #     responses:
  #       '200':
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ResponseWithMsg"
  #       '404':
  #         description: Not Found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ResponseWithMsgError"
  #     security:
  #       - bearerAuth: []



  # PORJECTS
  /project:
    post:
      summary: Create a project
      tags:
        - Project Routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
      security:
        - bearerAuth: []
    
    get:
      summary: Get all projects
      tags:
        - Project Routes
      parameters:
        - in: query
          name: page
          required: true
          schema:
            type: string
        - in: query
          name: count
          required: true
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  projects:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        description:
                          type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
      security:
        - bearerAuth: []
    
  /project/{id}/procedures:
    post:
      summary: Map procedures to a project
      tags:
        - Project Routes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                procedures:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
      security:
        - bearerAuth: []

    delete:
      summary: Unlink procedures from a project
      tags:
        - Project Routes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                procedures:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
      security:
        - bearerAuth: []

  /project/{id}/controls:
    post:
      summary: Map controls to a project
      tags:
        - Project Routes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                controls:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
      security:
        - bearerAuth: []

    delete:
      summary: Unlink controls from a project
      tags:
        - Project Routes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                controls:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
      security:
        - bearerAuth: []
    
  /project/{id}/risks:
    post:
      summary: Map risks to a project
      tags:
        - Project Routes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                risks:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
      security:
        - bearerAuth: []

    delete:
      summary: Unlink risks from a project
      tags:
        - Project Routes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                risks:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
      security:
        - bearerAuth: []

  /project/{id}/policies:
    get:
      summary: Get project policies by ID
      tags:
        - Project Routes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: page
          required: true
          schema:
            type: string
        - in: query
          name: count
          required: true
          schema:
            type: string
        - in: query
          name: policyTitle
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  projects:
                    type: array
                    items:
                      type: object
                      properties:
                        title:
                          type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
      security:
        - bearerAuth: []

    delete:
      summary: Unlink policies from a project
      tags:
        - Project Routes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                policies:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
      security:
        - bearerAuth: []
    
    post:
      summary: Map policies to a project
      tags:
        - Project Routes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                policies:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
      security:
        - bearerAuth: []
    
  /project/{id}:
    get:
      summary: Get project by ID
      tags:
        - Project Routes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: 
                  status:
                    type: boolean
                  project:
                    type: object
                    properties:
                      name:
                        type: string
                      description:
                        type: string
                      policies:
                        type: array
                        items:
                          type: object
                        description: IDs of associated policies
                      procedures:
                        type: array
                        items:
                          type: string
                        description: IDs of associated procedures
                      risks:
                        type: array
                        items:
                          type: string
                        description: IDs of associated risks
                      scopes:
                        type: array
                        items:
                          type: object
                        description: IDs of associated scopes
                      controls:
                        type: array
                        items:
                          type: string
                        description: IDs of associated controls
                      created_by:
                        type: string
                        description: ID of the user who created the project
                      created_at:
                        type: string
                        format: date-time
                        description: Date and time when the project was created
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
      security:
        - bearerAuth: []

    put:
      summary: Update a project by ID
      tags:
        - Project Routes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
      security:
        - bearerAuth: []

    delete:
      summary: Delete a project by ID
      tags:
        - Project Routes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
      security:
        - bearerAuth: []


  # QUESTION BANK
  /questionBank:
    post:
      summary: Create a new questionnaire
      tags:
        - Project Routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                type:
                  type: string
                
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
      security:
        - bearerAuth: []
    
    get:
      summary: Get all questionnaires
      tags:
        - Project Routes
      parameters:
        - in: query
          name: page
          schema:
            type: string
        - in: query
          name: count
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    content:
                      type: string
                    type:
                      type: string
                
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
      security:
        - bearerAuth: []

  /questionBank/{id}:
    delete:
      summary: Delete a questionnaire by ID
      tags:
        - Project Routes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
      security:
        - bearerAuth: []
    
    get:
      summary: Retrieve a questionnaire by ID
      tags:
        - Project Routes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: string
                  type:
                    type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
      security:
        - bearerAuth: []

    put:
      summary: Update a questionnaire by ID
      tags:
        - Project Routes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                type:
                  type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsg"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithMsgError"
      security:
        - bearerAuth: []










  